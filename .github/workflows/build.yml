name: build
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04
    env:
      BUILD_TYPE: Debug 
      SONAR_SCANNER_VERSION: 4.6.1.2450 # Find the latest version in the "Linux" link on this page:
      RISCV32_TOOLCHAIN_GZIP: riscv32-embecosm-gcc-ubuntu2204-20221030
      # https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/
      SONAR_HOST_URL: "https://sonarcloud.io"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install Ninja
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build gcovr

      - name: Cache RV32 GCC Toolchain
        id: cache-riscv-toolchain
        uses: actions/cache@v3
        with:
          path: ~/.riscv-gcc
          key: ${{ runner.os }}-riscv-gcc
          restore-keys: ${{ runner.os }}-riscv-gcc

      - name: Download & Extract RISCV32 GCC Toolchain
        if: steps.cache-riscv-toolchain.outputs.cache-hit != 'true'
        shell: bash
        env:
          RISCV32_TOOLCHAIN_URL: https://buildbot.embecosm.com/job/riscv32-gcc-ubuntu2204/30/artifact/riscv32-embecosm-gcc-ubuntu2204-20221030.tar.gz
        run: |
          mkdir -p $HOME/.riscv-gcc
          wget -q ${{env.RISCV32_TOOLCHAIN_URL}}
          tar xf ${{env.RISCV32_TOOLCHAIN_GZIP}}.tar.gz -C $HOME/.riscv-gcc/

      - name: Set up ENV
        run: echo "$HOME/.riscv-gcc/${{env.RISCV32_TOOLCHAIN_GZIP}}/bin" >> $GITHUB_PATH


      - name: Cache riscv-tests 
        id: cache-riscv-tests
        uses: actions/cache@v3
        with:
          path: ~/.riscv-gcc/${{env.RISCV32_TOOLCHAIN_GZIP}}/share
          key: ${{ runner.os }}-riscv-tests
          restore-keys: ${{ runner.os }}-riscv-tests

      - name: Set-up riscv-tests
        if: steps.cache-riscv-tests.outputs.cache-hit != 'true'
        shell: bash
        run: |
          git clone --recurse-submodules https://github.com/riscv-software-src/riscv-tests.git; cd riscv-tests
          git submodule update --init --recursive

          # Patch Makefile.in
          git clone https://gist.github.com/b5c1b033143cbdce51afa0c1280970a8.git
          patch < b5c1b033143cbdce51afa0c1280970a8/patch1.diff

          # Configure and Make
          autoupdate
          autoconf
          mkdir build; cd build
          RISCV=$HOME/.riscv-gcc/${{env.RISCV32_TOOLCHAIN_GZIP}} 
          ../configure --prefix=$RISCV --with-xlen=32
          make install

      - name: Build & Test 
        shell: bash
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON -DCOVERAGE=ON -DISA_TESTS_DIR=$HOME/.riscv-gcc/${{env.RISCV32_TOOLCHAIN_GZIP}}/share/riscv-tests/isa -S . -B ${{env.BUILD_TYPE}} -GNinja
          ninja -C ${{env.BUILD_TYPE}}
          ctest --output-on-failure --test-dir ${{env.BUILD_TYPE}}/test
          gcovr -e external > coverage.xml

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Set the property "sonar.cfamily.compile-commands" to the compilation database file
          sonar-scanner --define sonar.host.url="${{ env.SONAR_HOST_URL }}" --define sonar.cfamily.compile-commands=${{env.BUILD_TYPE}}/compile_commands.json
